import logging, os, random, time, telebot
import sqlite3
from telebot import types
from dotenv import load_dotenv

load_dotenv()

bot_key = os.getenv('BOT_KEY')
#chat where bot will publish all messages anonymously
answers_chat = int(os.getenv('CHAT_FOR_ANSWERS'))
#channel or chat where bot will publish questions and answers
channel_to_publish = os.getenv('CHANNEL_TO_PUBLISH_QA')
#question and answer will be published with this hashtag
hashtag = os.getenv('HASHTAG')

bot_name = os.getenv('BOT_NAME')
diary_name = os.getenv('DIARY_NAME')
taglist_url = os.getenv('TAGLIST_URL')
channel_url = os.getenv('CHANNEL_URL')
chat_url = os.getenv('CHAT_URL')
shop_url = os.getenv('SHOP_URL')
master_usr_url = os.getenv('MASTER_USR_URL')
master_nick = os.getenv('MASTER_NICK')
little_usr_url = os.getenv('LITTLE_USR_URL')
little_nick = os.getenv('LITTLE_NICK')


format_str = "%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s"
logFormatter = logging.Formatter(format_str)
logging.basicConfig(filename="log.txt", level=logging.INFO, encoding = "UTF-8", format=format_str)
consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
logging.getLogger().addHandler(consoleHandler)

bot = telebot.TeleBot(bot_key, parse_mode='HTML')

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
qa = types.KeyboardButton('‚ùî –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùî')
tags = types.KeyboardButton('#Ô∏è‚É£ –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ #Ô∏è‚É£')
chat = types.KeyboardButton('üí¨ –ß–∞—Ç üí¨')
shop = types.KeyboardButton('üõí –ú–∞–≥–∞–∑–∏–Ω üõí')
diary = types.KeyboardButton('üêª –î–Ω–µ–≤–Ω–∏—á–æ–∫ üêª')
contacts = types.KeyboardButton('üìì –ö–æ–Ω—Ç–∞–∫—Ç—ã üìì')
markup.row(qa), markup.row(tags), markup.row(chat, shop), markup.row(diary, contacts)

mrkp_cancel = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
mrkp_cancel.add(btn)


@bot.message_handler(commands=['start', 'help'], chat_types='private')
def send_welcome(message):
    logging.info(f'\n~ New user! \n   - {message.from_user.username}\n')
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!', reply_markup=markup)
    time.sleep(1)
    bot.send_message(message.chat.id, f'–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ <i><b>{diary_name}</b></i>!‚ú®')
    time.sleep(1)
    bot.send_message(message.chat.id, f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {bot_name} –∏ —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –≤–æ –º–Ω–æ–≥–æ–º!')


@bot.message_handler(regexp='–ê–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', chat_types='private')
def ask_question(message):
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!', reply_markup=mrkp_cancel)
    bot.register_next_step_handler(message, react_on_question)


def react_on_question(message):
    logging.info(f'\n~ Question come! \n   - {message.from_user.username}\n   - {message.text}\n')
    reply_vars = [
        '–≠—Ç–æ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–≤–æ–∏–º —Ö–æ–∑—è–µ–≤–∞–º.',
        '–•–º, –∞ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –£–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞—é, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ –¥–Ω–µ–≤–Ω–∏—á–∫–µ!',
        '–í–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—è—Ç! –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–Ω–µ–≤–Ω–∏—á–∫–æ–º, –æ—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è —Ç–∞–º.']
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–ö–∞–∫ —Å–∫–∞–∂–µ—à—å‚ú®', reply_markup=markup)
        return
    bot.send_message(answers_chat, '<b>–í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:</b>', reply_markup=None)
    match message.content_type:
        case 'text':
            bot.send_message(answers_chat, message.text)
        case 'photo':
            photo = message.photo[2]
            bot.send_photo(answers_chat, photo = photo.file_id, caption=message.caption, reply_markup=markup)
        case 'animation':
            bot.send_animation(answers_chat, animation=message.animation.file_id, caption=message.caption, reply_markup=markup)
        case 'video':
            bot.send_video(answers_chat, video=message.video.file_id, caption=message.caption, reply_markup=markup)
        case 'document':
            bot.send_document(answers_chat, document=message.document.file_id, caption=message.caption, reply_markup=markup)
        case 'audio':
            bot.send_audio(answers_chat, audio=message.audio.file_id, caption=message.caption, reply_markup=markup)
        case 'voice':
            bot.send_voice(answers_chat, voice=message.voice.file_id, caption=message.caption, reply_markup=markup)
        case 'sticker':
            bot.send_sticker(answers_chat, sticker=message.sticker.file_id, reply_markup=markup)
    bot.reply_to(message, random.choice(reply_vars), reply_markup=markup)


@bot.message_handler(func=lambda message: True, chat_types='group')
def react_on_answer(message):
    logging.info(f'\n~ Answer publishing! \n   - {message.reply_to_message.text or message.content_type}\n   - {message.text}\n')
    if message.chat.id != answers_chat:
        pass
        
    if message.from_user.username == "edwy_reed":
        message_text = f'<b>–í–æ–ø—Ä–æ—Å–∏–∫üíú:</b>\n ‚ú® {message.reply_to_message.text or "–ê —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç!"} \n \n<b>–û—Ç–≤–µ—Ç–∏–∫üíú:</b>\n ü¶Å {message.text} \n \n{hashtag}'
    elif message.from_user.username == "redbeaniy":
        message_text = f'<b>–í–æ–ø—Ä–æ—Å–∏–∫üíú:</b>\n ‚ú® {message.reply_to_message.text or "–ê —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç!"} \n \n<b>–û—Ç–≤–µ—Ç–∏–∫üíú:</b>\n üê± {message.text} \n \n{hashtag}'

    match message.reply_to_message.content_type:
        case 'text':
            bot.send_message(channel_to_publish, message_text)
        case 'photo':
            photo = message.reply_to_message.photo[2]
            bot.send_photo(channel_to_publish, photo = photo.file_id, caption=message_text)
        case 'animation':
            bot.send_animation(channel_to_publish, animation=message.reply_to_message.animation.file_id, caption=message_text)
        case 'video':
            bot.send_video(channel_to_publish, video=message.reply_to_message.video.file_id, caption=message_text)
        case 'document':
            bot.send_document(channel_to_publish, document=message.reply_to_message.document.file_id, caption=message_text)
        case 'audio':
            bot.send_audio(channel_to_publish, audio=message.reply_to_message.audio.file_id, caption=message_text)
        case 'voice':
            bot.send_voice(channel_to_publish, voice=message.reply_to_message.voice.file_id, caption=message_text)
        case _:
            bot.send_message(answers_chat, '–£–ø—Å. –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∫–∏ :( \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')


@bot.message_handler(regexp='–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', chat_types='private')
def show_tags(message):
    text = '<b>–î–µ—Ä–∂–∏!</b> –¢–µ–±–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫—É –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –∏–∑ —Ç–µ–≥–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ.'
    inline_markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text = '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤', url = taglist_url)
    inline_markup.add(btn)
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)


@bot.message_handler(regexp='–ß–∞—Ç', chat_types='private')
def show_chat(message):
    text = '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —á–∞—Ç–∏–∫–µ, —Ç–∞–º –æ—á–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ.'
    inline_markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç', url = chat_url)
    inline_markup.add(btn)
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)


@bot.message_handler(regexp='–ú–∞–≥–∞–∑–∏–Ω', chat_types='private')
def show_shop(message):
    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–ª—ã–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫ –∫–∏—Ç—Ç–∏-—Ç—è–Ω‚ú®'
    inline_markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', url = shop_url)
    btn2 = types.InlineKeyboardButton(text = '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑', callback_data = 'carousel_init')
    inline_markup.add(btn1, btn2)
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)
    

@bot.callback_query_handler(func=lambda call: True)
def carousel_handler(call):
    conn = sqlite3.connect("shop.sqlite")
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    items = cursor.execute("SELECT * FROM accessories").fetchall()
    if call.data == 'carousel_init': 
        item_id = 0
    else: 
        item_id = get_current_item_id(items, call.message.html_caption)
    current_item = items[item_id]

    match call.data:
        case 'carousel_init':
            inline_markup = get_updated_markup(items, item_id, current_item)
            bot.send_photo(call.message.chat.id, photo = open(current_item[0], 'rb'), caption=current_item[1], reply_markup=inline_markup)
        case 'carousel_next':
            if item_id < len(items) - 1:
                item_id += 1
            else: item_id = 0
            current_item = items[item_id]
            photo = types.InputMediaPhoto(open(current_item[0], 'rb'), caption=current_item[1])
            inline_markup = get_updated_markup(items, item_id, current_item)
            bot.edit_message_media(media = photo, chat_id = call.message.chat.id, message_id = call.message.id, reply_markup=inline_markup)
        case 'carousel_prev':
            if item_id > 0:
                item_id -= 1
            else: item_id = len(items) - 1
            current_item = items[item_id]
            photo = types.InputMediaPhoto(open(current_item[0], 'rb'), caption=current_item[1])
            inline_markup = get_updated_markup(items, item_id, current_item)
            bot.edit_message_media(media = photo, chat_id = call.message.chat.id, message_id = call.message.id, reply_markup=inline_markup)
        case 'carousel_buy':
            if call.from_user.username is not None:
                photo = open(current_item[0], 'rb')
                bot.send_photo(chat_id = 664709929, photo = photo, caption = f'–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{call.from_user.username}')
            else:
                bot.send_message(call.message.chat.id, f'–ú—Ñ—å. –Ø –Ω–µ —Å–º–æ–≥–ª–∞ —É–≤–∏–¥–µ—Ç—å –≤–∞—à —é–∑–µ—Ä–Ω–µ–π–º.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @redbeaniy –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞)')
                bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ú–∞–ª—ã—à–∫–∞ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞.')
            bot.delete_message(call.message.chat.id, call.message.id)
        case 'carousel_close':
            bot.delete_message(call.message.chat.id, call.message.id)
        case _:
            pass


def get_updated_markup(items, item_id, current_item):
    inline_markup = types.InlineKeyboardMarkup()
    btn0 = types.InlineKeyboardButton(text = '<-', callback_data = 'carousel_prev')
    btn1 = types.InlineKeyboardButton(text = f'{item_id + 1} –∏–∑ {len(items)}', callback_data = 'none')
    btn2 = types.InlineKeyboardButton(text = '->', callback_data = 'carousel_next')
    btn3 = types.InlineKeyboardButton(text = f'–ö—É–ø–∏—Ç—å –∑–∞ {current_item[2]} —Ä—É–±.', callback_data = 'carousel_buy')
    btn4 = types.InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'carousel_close')
    inline_markup.row(btn0, btn1, btn2)
    inline_markup.row(btn3, btn4)
    return inline_markup


def get_current_item_id(items, html_caption):
    for i in range(len(items)):
        if items[i][1] == html_caption:
            return i
    return 0


@bot.message_handler(regexp='–î–Ω–µ–≤–Ω–∏—á–æ–∫', chat_types='private')
def show_diary(message):
    text = f'–ê –≤–æ—Ç –∏ —Å—Å—ã–ª–æ—á–∫–∞ –Ω–∞ –Ω–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n–¢—ã–∫–∞–π –∫–Ω–æ–ø–æ—á–∫—É –∏ –¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏: @beariy_diary'
    inline_markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫', url = channel_url)
    inline_markup.add(btn)
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)


@bot.message_handler(regexp='–ö–æ–Ω—Ç–∞–∫—Ç—ã', chat_types='private')
def show_contacts(message):
    text = '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º—É-—Ç–æ –∏–∑ –Ω–∞—Å –ª–∏—á–Ω–æ.'
    inline_markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text = little_nick, url = little_usr_url)
    btn2 = types.InlineKeyboardButton(text = master_nick, url = master_usr_url)
    inline_markup.add(btn1, btn2)
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)


@bot.message_handler(func=lambda message: True, chat_types='private')
def unknown_command(message):
    text = '–û—Ö—Ö, –ø—Ä–æ—Å—Ç–∏, —è –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –ø–æ–Ω—è–ª–∞ —Ç–µ–±—è, –º–µ–Ω—è –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ.'
    bot.send_message(message.chat.id, text, reply_markup=markup)

bot.infinity_polling()