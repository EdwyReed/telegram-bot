import logging, os, random, time, telebot
from telebot import types
from dotenv import load_dotenv

load_dotenv()

bot_key = os.getenv('BOT_KEY')
#chat where bot will publish all messages anonymously
answers_chat = int(os.getenv('CHAT_FOR_ANSWERS'))
#channel or chat where bot will publish questions and answers
channel_to_publish = os.getenv('CHANNEL_TO_PUBLISH_QA')
#question and answer will be published with this hashtag
hashtag = os.getenv('HASHTAG')

bot_name = os.getenv('BOT_NAME')
diary_name = os.getenv('DIARY_NAME')
taglist_url = os.getenv('TAGLIST_URL')
chat_id = os.getenv('CHAT_ID')
shop_id = os.getenv('SHOP_ID')
master_username = os.getenv('MASTER_USERNAME')
little_username = os.getenv('LITTLE_USERNAME')


format_str = "%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s"
logFormatter = logging.Formatter(format_str)
logging.basicConfig(filename="log.txt", level=logging.INFO, encoding = "UTF-8", format=format_str)
consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
logging.getLogger().addHandler(consoleHandler)

bot = telebot.TeleBot(bot_key, parse_mode='MARKDOWN')

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
qa = types.KeyboardButton('–ê–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
tags = types.KeyboardButton('–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞')
chat = types.KeyboardButton('–ß–∞—Ç')
shop = types.KeyboardButton(' –ú–∞–≥–∞–∑–∏–Ω')
contacts = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã')
markup.row(qa), markup.row(tags), markup.row(chat, shop), markup.row(contacts)

mrkp_cancel = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
mrkp_cancel.add(btn)


@bot.message_handler(commands=['start', 'help'], chat_types='private')
def send_welcome(message):
    logging.info(f'\n~ New user! \n   - {message.from_user.username}\n')
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!', reply_markup=markup)
    time.sleep(1)
    bot.send_message(message.chat.id, f'–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ __**{diary_name}**__!‚ú®')
    time.sleep(1)
    bot.send_message(message.chat.id, f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {bot_name} –∏ —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –≤–æ –º–Ω–æ–≥–æ–º!')


@bot.message_handler(regexp='–ê–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', chat_types='private')
def ask_question(message):
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!', reply_markup=mrkp_cancel)
    bot.register_next_step_handler(message, react_on_question)


def react_on_question(message):
    logging.info(f'\n~ Question come! \n   - {message.from_user.username}\n   - {message.text}\n')
    reply_vars = [
        '–≠—Ç–æ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–≤–æ–∏–º —Ö–æ–∑—è–µ–≤–∞–º.',
        '–•–º, –∞ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –£–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞—é, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ –¥–Ω–µ–≤–Ω–∏—á–∫–µ!',
        '–í–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—è—Ç! –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–Ω–µ–≤–Ω–∏—á–∫–æ–º, –æ—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è —Ç–∞–º.']
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–ö–∞–∫ —Å–∫–∞–∂–µ—à—å‚ú®', reply_markup=markup)
    else:
        bot.reply_to(message, random.choice(reply_vars), reply_markup=markup)
        bot.send_message(answers_chat, '***–í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:***')
        bot.send_message(answers_chat, message.text)


@bot.message_handler(func=lambda message: True, chat_types='group')
def react_on_answer(message):
    logging.info(f'\n~ Answer publishing! \n   - {message.reply_to_message.text}\n   - {message.text}\n')
    if message.chat.id == answers_chat:
        if message.from_user.username == "edwy_reed":
            message = f'***–í–æ–ø—Ä–æ—Å–∏–∫üíú:\n ‚ú® ***{message.reply_to_message.text} \n \n***–û—Ç–≤–µ—Ç–∏–∫üíú:\n ü¶Å ***{message.text} \n \n{hashtag}'
            bot.send_message(channel_to_publish, message)
        elif message.from_user.username == "redbeaniy":
            message = f'***–í–æ–ø—Ä–æ—Å–∏–∫üíú:\n ‚ú® ***{message.reply_to_message.text} \n \n***–û—Ç–≤–µ—Ç–∏–∫üíú:\n üê± ***{message.text} \n \n{hashtag}'
            bot.send_message(channel_to_publish, message)


@bot.message_handler(regexp='–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', chat_types='private')
def show_tags(message):
    text = '**–î–µ—Ä–∂–∏!** –¢–µ–±–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫—É –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –∏–∑ —Ç–µ–≥–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ.'
    inline_markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text = '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—ç–≥–æ–≤', url = taglist_url)
    inline_markup.add(btn)
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)


@bot.message_handler(regexp='–ß–∞—Ç', chat_types='private')
def show_chat(message):
    text = '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —á–∞—Ç–∏–∫–µ, —Ç–∞–º –æ—á–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ.'
    inline_markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç', url = chat_id)
    inline_markup.add(btn)
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)


@bot.message_handler(regexp='–ú–∞–≥–∞–∑–∏–Ω', chat_types='private')
def show_shop(message):
    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–ª—ã–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫ –∫–∏—Ç—Ç–∏-—Ç—è–Ω‚ú®'
    inline_markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', url = shop_id)
    inline_markup.add(btn)
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)


@bot.message_handler(regexp='–ö–æ–Ω—Ç–∞–∫—Ç—ã', chat_types='private')
def show_contacts(message):
    text = '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º—É-—Ç–æ –∏–∑ –Ω–∞—Å –ª–∏—á–Ω–æ.'
    inline_markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text = '–ö–∏—Ç—Ç–∏-—Ç—è–º–∞ (–ú—è–ø–∫–∏–Ω—Å –ú–ª–∞–¥—à–∞—è)', url = little_username)
    btn2 = types.InlineKeyboardButton(text = '–ú—è–ø–∫–∏–Ω—Å –°—Ç–∞—Ä—à–∏–π', url = master_username)
    inline_markup.add(btn1, btn2)
    bot.send_message(message.chat.id, text, reply_markup=inline_markup)


@bot.message_handler(func=lambda message: True, chat_types='private')
def unknown_command(message):
    text = '–û—Ö—Ö, –ø—Ä–æ—Å—Ç–∏, –Ω–µ —Å–æ–≤—Å–µ–º —Ç–µ–±—è –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ.'
    bot.send_message(message.chat.id, text, reply_markup=markup)
        

bot.infinity_polling()